------------------
Changes from SMF 2
------------------

1) Database changes for upgrading from SMF 2.0/2.1 to 3.0.

Everything in install sql, diff-ed with SMF.
Added to which: (to note before I forget) session table structure remains the same.

members table: split

'forum_alias_urls' from smf_settings --> 'alias_urls'

2) Hooks changes:

hooks --> Events

integrate_verify_user => core_user_preload
integrate_user_info => core_user_load


3) List of global variables changes for porting to SMF 3.0

$context --> Application::_context (private)
$context[$key] --> $value --> Application::addValueToContext($key, $value)
For arrays --> Application::addToContext($toAdd)
$context['user'] -->

$modSettings[$key] --> Configuration::getConf()->_key
// to be simplified

$txt[$key] -->Language::getLanguage()->get($key)
// to be simplified

$user_settings

$user_info

4) Files changes for porting to SMF 3.0:

Sources/Subs-Xxx files --> model/Xxx classes, or XxxStorage files
(processing --> model; database work -> storage)

Sources/Xxx files --> controllers/XxxController classes

Themes/default/languages files --> languages/*.yaml files

Themes/default/*.template files --> templates/*.tox files

5) requires
require_once 'file' --> use 'class'

6) Widely used functions:

loadTemplate('name') --> $module->loadTemplates('name')
loadLanguage('name') --> $module->loadLanguage('name')
fatal_lang_error('name') --> $module->throwLangException('name')

7) Special cases:
Some widely used functions may be available, implemented as convenience functions for the client code.
That is, they may be implemented to delegate undercover, to the respective object.
Examples:
obExit() --> available as obExit(), equivalent with Response::getInstance()->sendOutput()

8) Cookies:
Identical. Managed in Cookie class.
